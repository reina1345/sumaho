[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "python-mise-template"
version = "0.1.0"
description = "A modern Python project template with mise and development best practices"
authors = [{ name = "Your Name", email = "your.email@example.com" }]
readme = "README.md"
requires-python = ">=3.11, <3.12"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "python-dotenv>=1.0.0, <2",  # Environment variable management
]

[project.license]
text = "MIT"

[project.optional-dependencies]
# Development tools - install with: uv pip install -e .[dev]
dev = [
    "black>=23.7.0",           # Code formatter
    "ruff>=0.0.285",           # Fast linter
    "mypy>=1.16.1",            # Static type checker
    "pytest>=8.0.2",           # Testing framework
    "pytest-cov>=4.1.0",       # Test coverage
    "poethepoet>=0.20.0",      # Task runner (alternative to mise tasks)
]

[project.urls]
Homepage = "https://github.com/yourusername/python-mise-template"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py311"]
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100
exclude = [".git", ".venv", "build", "dist", "__pycache__"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
]

# Mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["tests/*", ".venv/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

# Poethepoet task configuration (alternative to mise tasks)
[tool.poe.tasks]
format = ["_ruff_format", "_black_format"]
lint = ["_black_check", "_ruff_check"]
type-check = "mypy src"
test = "pytest tests -vv"
test-cov = "pytest tests -vv --cov=src --cov-report=term-missing"

[tool.poe.tasks._black_format]
cmd = "black src tests"
help = "Format code with Black"

[tool.poe.tasks._ruff_format]
cmd = "ruff check --fix src tests"
help = "Format and fix code with Ruff"

[tool.poe.tasks._black_check]
cmd = "black --check src tests"
help = "Check code formatting with Black"

[tool.poe.tasks._ruff_check]
cmd = "ruff check src tests"
help = "Check code with Ruff"
